// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package project_aprehendidosdwh.job_cargar_fact_delito_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Job_Cargar_fact_delito Purpose: <br>
 * Description: tabla de hechos por dia y delito (granularidad delito) <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Job_Cargar_fact_delito implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Job_Cargar_fact_delito";
	private final String projectName = "PROJECT_APREHENDIDOSDWH";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Job_Cargar_fact_delito.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Job_Cargar_fact_delito.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPivotToColumnsDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_captura_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_lugar_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {
					conn_tDBClose_1.close();
				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				/**
				 * [tDBClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String dbProperties_tDBConnection_1 = "";
				String url_tDBConnection_1 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/"
						+ "DWHAprehensiones";

				if (dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
					url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
				}
				String dbUser_tDBConnection_1 = "anaPg";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:pO9bABfZimEAujO/n/aJB4/tjpJBbOdxa2V/d8VK6ys=");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 = java.sql.DriverManager.getDrivers();
				java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(
						java.util.Arrays.asList("com.amazon.redshift.jdbc.Driver", "com.amazon.redshift.jdbc41.Driver",
								"com.amazon.redshift.jdbc42.Driver"));
				while (drivers_tDBConnection_1.hasMoreElements()) {
					java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
					if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
						try {
							java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
							java.sql.DriverManager.registerDriver(d_tDBConnection_1);
						} catch (java.lang.Exception e_tDBConnection_1) {
							// do nothing
						}
					}
				}
				String driverClass_tDBConnection_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tDBConnection_1", "public");

				globalMap.put("conn_" + "tDBConnection_1", conn_tDBConnection_1);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBInput_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class salida_factStruct implements routines.system.IPersistableRow<salida_factStruct> {
		final static byte[] commonByteArrayLock_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[0];
		static byte[] commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[0];

		public Integer sk_fecha;

		public Integer getSk_fecha() {
			return this.sk_fecha;
		}

		public String lugar;

		public String getLugar() {
			return this.lugar;
		}

		public String delito;

		public String getDelito() {
			return this.delito;
		}

		public Integer total_aprehendidos_delito;

		public Integer getTotal_aprehendidos_delito() {
			return this.total_aprehendidos_delito;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito.length) {
					if (length < 1024 && commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito.length == 0) {
						commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[1024];
					} else {
						commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito, 0, length);
				strReturn = new String(commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito) {

				try {

					int length = 0;

					this.sk_fecha = readInteger(dis);

					this.lugar = readString(dis);

					this.delito = readString(dis);

					this.total_aprehendidos_delito = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.sk_fecha, dos);

				// String

				writeString(this.lugar, dos);

				// String

				writeString(this.delito, dos);

				// Integer

				writeInteger(this.total_aprehendidos_delito, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sk_fecha=" + String.valueOf(sk_fecha));
			sb.append(",lugar=" + lugar);
			sb.append(",delito=" + delito);
			sb.append(",total_aprehendidos_delito=" + String.valueOf(total_aprehendidos_delito));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(salida_factStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tiempoStruct implements routines.system.IPersistableRow<tiempoStruct> {
		final static byte[] commonByteArrayLock_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[0];
		static byte[] commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[0];

		public Integer sk_fecha_id;

		public Integer getSk_fecha_id() {
			return this.sk_fecha_id;
		}

		public java.util.Date fechad_id;

		public java.util.Date getFechad_id() {
			return this.fechad_id;
		}

		public String fecha_string;

		public String getFecha_string() {
			return this.fecha_string;
		}

		public String diasem_string;

		public String getDiasem_string() {
			return this.diasem_string;
		}

		public Integer diasem_num;

		public Integer getDiasem_num() {
			return this.diasem_num;
		}

		public Integer diames_num;

		public Integer getDiames_num() {
			return this.diames_num;
		}

		public Integer diaano_num;

		public Integer getDiaano_num() {
			return this.diaano_num;
		}

		public Integer sem_num;

		public Integer getSem_num() {
			return this.sem_num;
		}

		public String semano_num;

		public String getSemano_num() {
			return this.semano_num;
		}

		public Integer mes_num;

		public Integer getMes_num() {
			return this.mes_num;
		}

		public String mes_string;

		public String getMes_string() {
			return this.mes_string;
		}

		public String mesano_num;

		public String getMesano_num() {
			return this.mesano_num;
		}

		public String trimeste_id;

		public String getTrimeste_id() {
			return this.trimeste_id;
		}

		public String trimano_id;

		public String getTrimano_id() {
			return this.trimano_id;
		}

		public String semestre_id;

		public String getSemestre_id() {
			return this.semestre_id;
		}

		public String smtmano_id;

		public String getSmtmano_id() {
			return this.smtmano_id;
		}

		public String ano_id;

		public String getAno_id() {
			return this.ano_id;
		}

		public String find_ind_id;

		public String getFind_ind_id() {
			return this.find_ind_id;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito.length) {
					if (length < 1024 && commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito.length == 0) {
						commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[1024];
					} else {
						commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito, 0, length);
				strReturn = new String(commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito) {

				try {

					int length = 0;

					this.sk_fecha_id = readInteger(dis);

					this.fechad_id = readDate(dis);

					this.fecha_string = readString(dis);

					this.diasem_string = readString(dis);

					this.diasem_num = readInteger(dis);

					this.diames_num = readInteger(dis);

					this.diaano_num = readInteger(dis);

					this.sem_num = readInteger(dis);

					this.semano_num = readString(dis);

					this.mes_num = readInteger(dis);

					this.mes_string = readString(dis);

					this.mesano_num = readString(dis);

					this.trimeste_id = readString(dis);

					this.trimano_id = readString(dis);

					this.semestre_id = readString(dis);

					this.smtmano_id = readString(dis);

					this.ano_id = readString(dis);

					this.find_ind_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.sk_fecha_id, dos);

				// java.util.Date

				writeDate(this.fechad_id, dos);

				// String

				writeString(this.fecha_string, dos);

				// String

				writeString(this.diasem_string, dos);

				// Integer

				writeInteger(this.diasem_num, dos);

				// Integer

				writeInteger(this.diames_num, dos);

				// Integer

				writeInteger(this.diaano_num, dos);

				// Integer

				writeInteger(this.sem_num, dos);

				// String

				writeString(this.semano_num, dos);

				// Integer

				writeInteger(this.mes_num, dos);

				// String

				writeString(this.mes_string, dos);

				// String

				writeString(this.mesano_num, dos);

				// String

				writeString(this.trimeste_id, dos);

				// String

				writeString(this.trimano_id, dos);

				// String

				writeString(this.semestre_id, dos);

				// String

				writeString(this.smtmano_id, dos);

				// String

				writeString(this.ano_id, dos);

				// String

				writeString(this.find_ind_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sk_fecha_id=" + String.valueOf(sk_fecha_id));
			sb.append(",fechad_id=" + String.valueOf(fechad_id));
			sb.append(",fecha_string=" + fecha_string);
			sb.append(",diasem_string=" + diasem_string);
			sb.append(",diasem_num=" + String.valueOf(diasem_num));
			sb.append(",diames_num=" + String.valueOf(diames_num));
			sb.append(",diaano_num=" + String.valueOf(diaano_num));
			sb.append(",sem_num=" + String.valueOf(sem_num));
			sb.append(",semano_num=" + semano_num);
			sb.append(",mes_num=" + String.valueOf(mes_num));
			sb.append(",mes_string=" + mes_string);
			sb.append(",mesano_num=" + mesano_num);
			sb.append(",trimeste_id=" + trimeste_id);
			sb.append(",trimano_id=" + trimano_id);
			sb.append(",semestre_id=" + semestre_id);
			sb.append(",smtmano_id=" + smtmano_id);
			sb.append(",ano_id=" + ano_id);
			sb.append(",find_ind_id=" + find_ind_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tiempoStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_4Struct implements routines.system.IPersistableRow<after_tDBInput_4Struct> {
		final static byte[] commonByteArrayLock_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[0];
		static byte[] commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[0];

		public Integer sk_fecha_id;

		public Integer getSk_fecha_id() {
			return this.sk_fecha_id;
		}

		public java.util.Date fechad_id;

		public java.util.Date getFechad_id() {
			return this.fechad_id;
		}

		public String fecha_string;

		public String getFecha_string() {
			return this.fecha_string;
		}

		public String diasem_string;

		public String getDiasem_string() {
			return this.diasem_string;
		}

		public Integer diasem_num;

		public Integer getDiasem_num() {
			return this.diasem_num;
		}

		public Integer diames_num;

		public Integer getDiames_num() {
			return this.diames_num;
		}

		public Integer diaano_num;

		public Integer getDiaano_num() {
			return this.diaano_num;
		}

		public Integer sem_num;

		public Integer getSem_num() {
			return this.sem_num;
		}

		public String semano_num;

		public String getSemano_num() {
			return this.semano_num;
		}

		public Integer mes_num;

		public Integer getMes_num() {
			return this.mes_num;
		}

		public String mes_string;

		public String getMes_string() {
			return this.mes_string;
		}

		public String mesano_num;

		public String getMesano_num() {
			return this.mesano_num;
		}

		public String trimeste_id;

		public String getTrimeste_id() {
			return this.trimeste_id;
		}

		public String trimano_id;

		public String getTrimano_id() {
			return this.trimano_id;
		}

		public String semestre_id;

		public String getSemestre_id() {
			return this.semestre_id;
		}

		public String smtmano_id;

		public String getSmtmano_id() {
			return this.smtmano_id;
		}

		public String ano_id;

		public String getAno_id() {
			return this.ano_id;
		}

		public String find_ind_id;

		public String getFind_ind_id() {
			return this.find_ind_id;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito.length) {
					if (length < 1024 && commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito.length == 0) {
						commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[1024];
					} else {
						commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito, 0, length);
				strReturn = new String(commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito) {

				try {

					int length = 0;

					this.sk_fecha_id = readInteger(dis);

					this.fechad_id = readDate(dis);

					this.fecha_string = readString(dis);

					this.diasem_string = readString(dis);

					this.diasem_num = readInteger(dis);

					this.diames_num = readInteger(dis);

					this.diaano_num = readInteger(dis);

					this.sem_num = readInteger(dis);

					this.semano_num = readString(dis);

					this.mes_num = readInteger(dis);

					this.mes_string = readString(dis);

					this.mesano_num = readString(dis);

					this.trimeste_id = readString(dis);

					this.trimano_id = readString(dis);

					this.semestre_id = readString(dis);

					this.smtmano_id = readString(dis);

					this.ano_id = readString(dis);

					this.find_ind_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.sk_fecha_id, dos);

				// java.util.Date

				writeDate(this.fechad_id, dos);

				// String

				writeString(this.fecha_string, dos);

				// String

				writeString(this.diasem_string, dos);

				// Integer

				writeInteger(this.diasem_num, dos);

				// Integer

				writeInteger(this.diames_num, dos);

				// Integer

				writeInteger(this.diaano_num, dos);

				// Integer

				writeInteger(this.sem_num, dos);

				// String

				writeString(this.semano_num, dos);

				// Integer

				writeInteger(this.mes_num, dos);

				// String

				writeString(this.mes_string, dos);

				// String

				writeString(this.mesano_num, dos);

				// String

				writeString(this.trimeste_id, dos);

				// String

				writeString(this.trimano_id, dos);

				// String

				writeString(this.semestre_id, dos);

				// String

				writeString(this.smtmano_id, dos);

				// String

				writeString(this.ano_id, dos);

				// String

				writeString(this.find_ind_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sk_fecha_id=" + String.valueOf(sk_fecha_id));
			sb.append(",fechad_id=" + String.valueOf(fechad_id));
			sb.append(",fecha_string=" + fecha_string);
			sb.append(",diasem_string=" + diasem_string);
			sb.append(",diasem_num=" + String.valueOf(diasem_num));
			sb.append(",diames_num=" + String.valueOf(diames_num));
			sb.append(",diaano_num=" + String.valueOf(diaano_num));
			sb.append(",sem_num=" + String.valueOf(sem_num));
			sb.append(",semano_num=" + semano_num);
			sb.append(",mes_num=" + String.valueOf(mes_num));
			sb.append(",mes_string=" + mes_string);
			sb.append(",mesano_num=" + mesano_num);
			sb.append(",trimeste_id=" + trimeste_id);
			sb.append(",trimano_id=" + trimano_id);
			sb.append(",semestre_id=" + semestre_id);
			sb.append(",smtmano_id=" + smtmano_id);
			sb.append(",ano_id=" + ano_id);
			sb.append(",find_ind_id=" + find_ind_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_1Process(globalMap);
				tDBInput_2Process(globalMap);
				tDBInput_3Process(globalMap);

				tiempoStruct tiempo = new tiempoStruct();
				salida_factStruct salida_fact = new salida_factStruct();

				/**
				 * [tPivotToColumnsDelimited_1 begin ] start
				 */

				ok_Hash.put("tPivotToColumnsDelimited_1", false);
				start_Hash.put("tPivotToColumnsDelimited_1", System.currentTimeMillis());

				currentComponent = "tPivotToColumnsDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "salida_fact");
				}

				int tos_count_tPivotToColumnsDelimited_1 = 0;

				int nb_line_tPivotToColumnsDelimited_1 = 0;
				resourceMap.put("nb_line_tPivotToColumnsDelimited_1", nb_line_tPivotToColumnsDelimited_1);
				int nb_line_out_tPivotToColumnsDelimited_1 = 0;

				String fileName_tPivotToColumnsDelimited_1 = (new java.io.File(
						"D:/upc/estructura de datos y BD1/BD Avanzada/Proyecto/Archivo_pivot.csv")).getAbsolutePath()
								.replace("\\", "/");
				resourceMap.put("fileName_tPivotToColumnsDelimited_1", fileName_tPivotToColumnsDelimited_1);
				String fullName_tPivotToColumnsDelimited_1 = null;
				String extension_tPivotToColumnsDelimited_1 = null;
				String directory_tPivotToColumnsDelimited_1 = null;
				if ((fileName_tPivotToColumnsDelimited_1.indexOf("/") != -1)) {
					if (fileName_tPivotToColumnsDelimited_1.lastIndexOf(".") < fileName_tPivotToColumnsDelimited_1
							.lastIndexOf("/")) {
						fullName_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1;
						extension_tPivotToColumnsDelimited_1 = "";
					} else {
						fullName_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1.substring(0,
								fileName_tPivotToColumnsDelimited_1.lastIndexOf("."));
						extension_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1
								.substring(fileName_tPivotToColumnsDelimited_1.lastIndexOf("."));
					}
					directory_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1.substring(0,
							fileName_tPivotToColumnsDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tPivotToColumnsDelimited_1.lastIndexOf(".") != -1) {
						fullName_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1.substring(0,
								fileName_tPivotToColumnsDelimited_1.lastIndexOf("."));
						extension_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1
								.substring(fileName_tPivotToColumnsDelimited_1.lastIndexOf("."));
					} else {
						fullName_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1;
						extension_tPivotToColumnsDelimited_1 = "";
					}
					directory_tPivotToColumnsDelimited_1 = "";
				}
				// create directory only if not exists
				if (directory_tPivotToColumnsDelimited_1 != null
						&& directory_tPivotToColumnsDelimited_1.trim().length() != 0) {
					java.io.File dir_tPivotToColumnsDelimited_1 = new java.io.File(
							directory_tPivotToColumnsDelimited_1);
					if (!dir_tPivotToColumnsDelimited_1.exists()) {
						dir_tPivotToColumnsDelimited_1.mkdirs();
					}
				}
				java.io.FileOutputStream fos_tPivotToColumnsDelimited_1 = null;
				java.io.OutputStreamWriter osw_tPivotToColumnsDelimited_1 = null;
				java.io.BufferedWriter outtPivotToColumnsDelimited_1 = null;
				outtPivotToColumnsDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tPivotToColumnsDelimited_1, false), "ISO-8859-15"));
				resourceMap.put("outtPivotToColumnsDelimited_1", outtPivotToColumnsDelimited_1);

				java.io.File filetPivotToColumnsDelimited_1 = new java.io.File(fileName_tPivotToColumnsDelimited_1);

				boolean pivot_ExiststPivotToColumnsDelimited_1 = false;

				StringBuilder pivot_KeytPivotToColumnsDelimited_1 = new StringBuilder();

				java.util.List<String> pivot_KeystPivotToColumnsDelimited_1 = new java.util.ArrayList<String>();

				boolean group_ExiststPivotToColumnsDelimited_1 = false;

				StringBuilder group_KeytPivotToColumnsDelimited_1 = new StringBuilder();

				java.util.Set<java.util.List<String>> group_KeystPivotToColumnsDelimited_1 = new java.util.LinkedHashSet<java.util.List<String>>();

				java.util.List<String> gKvaluetPivotToColumnsDelimited_1 = null;

				java.util.List<String> aggValuestPivotToColumnsDelimited_1 = null;

				java.util.Map<java.util.List<String>, java.util.List<String>> aggregationtPivotToColumnsDelimited_1 = new java.util.HashMap<java.util.List<String>, java.util.List<String>>();

				/**
				 * [tPivotToColumnsDelimited_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "tiempo");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<lugarStruct> tHash_Lookup_lugar = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<lugarStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<lugarStruct>) globalMap
						.get("tHash_Lookup_lugar"));

				tHash_Lookup_lugar.initGet();

				lugarStruct lugarHashKey = new lugarStruct();
				lugarStruct lugarDefault = new lugarStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<capturaStruct> tHash_Lookup_captura = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<capturaStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<capturaStruct>) globalMap
						.get("tHash_Lookup_captura"));

				capturaStruct capturaHashKey = new capturaStruct();
				capturaStruct capturaDefault = new capturaStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) globalMap
						.get("tHash_Lookup_row1"));

				row1Struct row1HashKey = new row1Struct();
				row1Struct row1Default = new row1Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				salida_factStruct salida_fact_tmp = new salida_factStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "SELECT \n  \"DWHAprehensiones\".\"public\".\"dimension_tiempoc\".\"sk_fecha_id\", \n  \"DWHAprehensiones\".\"public\".\"d"
						+ "imension_tiempoc\".\"fechad_id\", \n  \"DWHAprehensiones\".\"public\".\"dimension_tiempoc\".\"fecha_string\", \n  \"DWHApr"
						+ "ehensiones\".\"public\".\"dimension_tiempoc\".\"diasem_string\", \n  \"DWHAprehensiones\".\"public\".\"dimension_tiempoc"
						+ "\".\"diasem_num\", \n  \"DWHAprehensiones\".\"public\".\"dimension_tiempoc\".\"diames_num\", \n  \"DWHAprehensiones\".\"pu"
						+ "blic\".\"dimension_tiempoc\".\"diaano_num\", \n  \"DWHAprehensiones\".\"public\".\"dimension_tiempoc\".\"sem_num\", \n  \""
						+ "DWHAprehensiones\".\"public\".\"dimension_tiempoc\".\"semano_num\", \n  \"DWHAprehensiones\".\"public\".\"dimension_tiemp"
						+ "oc\".\"mes_num\", \n  \"DWHAprehensiones\".\"public\".\"dimension_tiempoc\".\"mes_string\", \n  \"DWHAprehensiones\".\"pub"
						+ "lic\".\"dimension_tiempoc\".\"mesano_num\", \n  \"DWHAprehensiones\".\"public\".\"dimension_tiempoc\".\"trimeste_id\", \n "
						+ " \"DWHAprehensiones\".\"public\".\"dimension_tiempoc\".\"trimano_id\", \n  \"DWHAprehensiones\".\"public\".\"dimension_ti"
						+ "empoc\".\"semestre_id\", \n  \"DWHAprehensiones\".\"public\".\"dimension_tiempoc\".\"smtmano_id\", \n  \"DWHAprehensiones"
						+ "\".\"public\".\"dimension_tiempoc\".\"ano_id\", \n  \"DWHAprehensiones\".\"public\".\"dimension_tiempoc\".\"find_ind_id\""
						+ "\nFROM \"DWHAprehensiones\".\"public\".\"dimension_tiempoc\"";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							tiempo.sk_fecha_id = null;
						} else {

							tiempo.sk_fecha_id = rs_tDBInput_4.getInt(1);
							if (rs_tDBInput_4.wasNull()) {
								tiempo.sk_fecha_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							tiempo.fechad_id = null;
						} else {

							tiempo.fechad_id = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 2);
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							tiempo.fecha_string = null;
						} else {

							tiempo.fecha_string = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							tiempo.diasem_string = null;
						} else {

							tiempo.diasem_string = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, false);
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							tiempo.diasem_num = null;
						} else {

							tiempo.diasem_num = rs_tDBInput_4.getInt(5);
							if (rs_tDBInput_4.wasNull()) {
								tiempo.diasem_num = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 6) {
							tiempo.diames_num = null;
						} else {

							tiempo.diames_num = rs_tDBInput_4.getInt(6);
							if (rs_tDBInput_4.wasNull()) {
								tiempo.diames_num = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 7) {
							tiempo.diaano_num = null;
						} else {

							tiempo.diaano_num = rs_tDBInput_4.getInt(7);
							if (rs_tDBInput_4.wasNull()) {
								tiempo.diaano_num = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 8) {
							tiempo.sem_num = null;
						} else {

							tiempo.sem_num = rs_tDBInput_4.getInt(8);
							if (rs_tDBInput_4.wasNull()) {
								tiempo.sem_num = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 9) {
							tiempo.semano_num = null;
						} else {

							tiempo.semano_num = routines.system.JDBCUtil.getString(rs_tDBInput_4, 9, false);
						}
						if (colQtyInRs_tDBInput_4 < 10) {
							tiempo.mes_num = null;
						} else {

							tiempo.mes_num = rs_tDBInput_4.getInt(10);
							if (rs_tDBInput_4.wasNull()) {
								tiempo.mes_num = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 11) {
							tiempo.mes_string = null;
						} else {

							tiempo.mes_string = routines.system.JDBCUtil.getString(rs_tDBInput_4, 11, false);
						}
						if (colQtyInRs_tDBInput_4 < 12) {
							tiempo.mesano_num = null;
						} else {

							tiempo.mesano_num = routines.system.JDBCUtil.getString(rs_tDBInput_4, 12, false);
						}
						if (colQtyInRs_tDBInput_4 < 13) {
							tiempo.trimeste_id = null;
						} else {

							tiempo.trimeste_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 13, false);
						}
						if (colQtyInRs_tDBInput_4 < 14) {
							tiempo.trimano_id = null;
						} else {

							tiempo.trimano_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 14, false);
						}
						if (colQtyInRs_tDBInput_4 < 15) {
							tiempo.semestre_id = null;
						} else {

							tiempo.semestre_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 15, false);
						}
						if (colQtyInRs_tDBInput_4 < 16) {
							tiempo.smtmano_id = null;
						} else {

							tiempo.smtmano_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 16, false);
						}
						if (colQtyInRs_tDBInput_4 < 17) {
							tiempo.ano_id = null;
						} else {

							tiempo.ano_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 17, false);
						}
						if (colQtyInRs_tDBInput_4 < 18) {
							tiempo.find_ind_id = null;
						} else {

							tiempo.find_ind_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 18, false);
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "tiempo");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "lugar"
						///////////////////////////////////////////////

						boolean forceLooplugar = false;

						lugarStruct lugarObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							tHash_Lookup_lugar.lookup(lugarHashKey);

							if (!tHash_Lookup_lugar.hasNext()) { // G_TM_M_090

								forceLooplugar = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooplugar = true;
						} // G 21

						lugarStruct lugar = null;

						while ((tHash_Lookup_lugar != null && tHash_Lookup_lugar.hasNext()) || forceLooplugar) { // G_TM_M_043

							// CALL close loop of lookup 'lugar'

							lugarStruct fromLookup_lugar = null;
							lugar = lugarDefault;

							if (!forceLooplugar) { // G 46

								fromLookup_lugar = tHash_Lookup_lugar.next();

								if (fromLookup_lugar != null) {
									lugar = fromLookup_lugar;
								}

							} // G 46

							forceLooplugar = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "captura"
							///////////////////////////////////////////////

							boolean forceLoopcaptura = false;

							capturaStruct capturaObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								capturaHashKey.fecha = tiempo.sk_fecha_id;

								capturaHashKey.municipio = lugar.municipio;

								capturaHashKey.departamento = lugar.departamento;

								capturaHashKey.hashCodeDirty = true;

								tHash_Lookup_captura.lookup(capturaHashKey);

							} // G_TM_M_020

							if (tHash_Lookup_captura != null && tHash_Lookup_captura.getCount(capturaHashKey) > 1) { // G
																														// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'captura' and it contains more one result from keys : captura.fecha = '" +
								// capturaHashKey.fecha + "', captura.municipio = '" + capturaHashKey.municipio
								// + "', captura.departamento = '" + capturaHashKey.departamento + "'");
							} // G 071

							capturaStruct captura = null;

							capturaStruct fromLookup_captura = null;
							captura = capturaDefault;

							if (tHash_Lookup_captura != null && tHash_Lookup_captura.hasNext()) { // G 099

								fromLookup_captura = tHash_Lookup_captura.next();

							} // G 099

							if (fromLookup_captura != null) {
								captura = fromLookup_captura;
							}

							///////////////////////////////////////////////
							// Starting Lookup Table "row1"
							///////////////////////////////////////////////

							boolean forceLooprow1 = false;

							row1Struct row1ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								row1HashKey.delito = captura.delito;

								row1HashKey.hashCodeDirty = true;

								tHash_Lookup_row1.lookup(row1HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row1 != null && tHash_Lookup_row1.getCount(row1HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row1'
								// and it contains more one result from keys : row1.delito = '" +
								// row1HashKey.delito + "'");
							} // G 071

							row1Struct row1 = null;

							row1Struct fromLookup_row1 = null;
							row1 = row1Default;

							if (tHash_Lookup_row1 != null && tHash_Lookup_row1.hasNext()) { // G 099

								fromLookup_row1 = tHash_Lookup_row1.next();

							} // G 099

							if (fromLookup_row1 != null) {
								row1 = fromLookup_row1;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								salida_fact = null;

// # Output table : 'salida_fact'
// # Filter conditions 
								if (

								captura.delito != null

								) {
									salida_fact_tmp.sk_fecha = tiempo.sk_fecha_id;
									salida_fact_tmp.lugar = lugar.municipio;
									salida_fact_tmp.delito = captura.delito;
									salida_fact_tmp.total_aprehendidos_delito = null;
									salida_fact = salida_fact_tmp;
								} // closing filter/reject
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "salida_fact"
							if (salida_fact != null) {

								/**
								 * [tPivotToColumnsDelimited_1 main ] start
								 */

								currentComponent = "tPivotToColumnsDelimited_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "salida_fact");
								}

								// pivot key
								pivot_ExiststPivotToColumnsDelimited_1 = false;

								int pivotNumtPivotToColumnsDelimited_1 = 0;

								for (int i = 0; i < pivot_KeystPivotToColumnsDelimited_1.size(); i++) {

									if (ParserUtils.parseTo_Integer(pivot_KeystPivotToColumnsDelimited_1.get(i))
											.equals(salida_fact.sk_fecha)) {
										pivot_ExiststPivotToColumnsDelimited_1 = true;

										pivotNumtPivotToColumnsDelimited_1 = i + 1;

										break;

									}
								}

								if (!pivot_ExiststPivotToColumnsDelimited_1) {

									pivot_KeytPivotToColumnsDelimited_1.delete(0,
											pivot_KeytPivotToColumnsDelimited_1.length());
									pivot_KeystPivotToColumnsDelimited_1.add(pivot_KeytPivotToColumnsDelimited_1
											.append(salida_fact.sk_fecha).toString());

									pivotNumtPivotToColumnsDelimited_1 = pivot_KeystPivotToColumnsDelimited_1.size();

								}

								// group key
								group_ExiststPivotToColumnsDelimited_1 = false;

								gKvaluetPivotToColumnsDelimited_1 = new java.util.ArrayList<String>();

								group_KeytPivotToColumnsDelimited_1.delete(0,
										group_KeytPivotToColumnsDelimited_1.length());

								gKvaluetPivotToColumnsDelimited_1
										.add(group_KeytPivotToColumnsDelimited_1.append(salida_fact.lugar).toString());

								group_KeytPivotToColumnsDelimited_1.delete(0,
										group_KeytPivotToColumnsDelimited_1.length());

								gKvaluetPivotToColumnsDelimited_1
										.add(group_KeytPivotToColumnsDelimited_1.append(salida_fact.delito).toString());

								group_KeytPivotToColumnsDelimited_1.delete(0,
										group_KeytPivotToColumnsDelimited_1.length());

								if (group_KeystPivotToColumnsDelimited_1.contains(gKvaluetPivotToColumnsDelimited_1)) {
									group_ExiststPivotToColumnsDelimited_1 = true;
								}

								if (!group_ExiststPivotToColumnsDelimited_1) {

									group_KeytPivotToColumnsDelimited_1.delete(0,
											group_KeytPivotToColumnsDelimited_1.length());

									group_KeystPivotToColumnsDelimited_1.add(gKvaluetPivotToColumnsDelimited_1);

									aggValuestPivotToColumnsDelimited_1 = new java.util.ArrayList<String>();

									for (int i = 0; i < pivotNumtPivotToColumnsDelimited_1 - 1; i++)

										aggValuestPivotToColumnsDelimited_1.add("");

									aggValuestPivotToColumnsDelimited_1.add("1");
									aggregationtPivotToColumnsDelimited_1.put(gKvaluetPivotToColumnsDelimited_1,
											aggValuestPivotToColumnsDelimited_1);

								} else {

									java.util.List<String> aggStrtPivotToColumnsDelimited_1 = aggregationtPivotToColumnsDelimited_1
											.get(gKvaluetPivotToColumnsDelimited_1);

									int aggSizetPivotToColumnsDelimited_1 = aggStrtPivotToColumnsDelimited_1.size();
									if (aggSizetPivotToColumnsDelimited_1 < pivotNumtPivotToColumnsDelimited_1) {

										for (int i = 0; i < pivotNumtPivotToColumnsDelimited_1
												- aggSizetPivotToColumnsDelimited_1 - 1; i++) {

											aggStrtPivotToColumnsDelimited_1.add("");

										}

										aggStrtPivotToColumnsDelimited_1.add("1");

									} else {

										// step1: get the index of the pivot
										int pivotIndextPivotToColumnsDelimited_1 = 0;

										for (int i = 0; i < pivot_KeystPivotToColumnsDelimited_1.size(); i++) {

											if (ParserUtils.parseTo_Integer(pivot_KeystPivotToColumnsDelimited_1.get(i))
													.equals(salida_fact.sk_fecha)) {
												pivotIndextPivotToColumnsDelimited_1 = i;

												break;

											}

										}

										// step2: process the splitted data according to function

										int counttPivotToColumnsDelimited_1 = 1;

										if (!("").equals(aggStrtPivotToColumnsDelimited_1
												.get(pivotIndextPivotToColumnsDelimited_1)))

											counttPivotToColumnsDelimited_1 = Integer
													.parseInt(aggStrtPivotToColumnsDelimited_1
															.get(pivotIndextPivotToColumnsDelimited_1))
													+ 1;

										aggStrtPivotToColumnsDelimited_1.set(pivotIndextPivotToColumnsDelimited_1,
												String.valueOf(counttPivotToColumnsDelimited_1));

									}

								}

								nb_line_tPivotToColumnsDelimited_1++;
								resourceMap.put("nb_line_tPivotToColumnsDelimited_1",
										nb_line_tPivotToColumnsDelimited_1);

								tos_count_tPivotToColumnsDelimited_1++;

								/**
								 * [tPivotToColumnsDelimited_1 main ] stop
								 */

								/**
								 * [tPivotToColumnsDelimited_1 process_data_begin ] start
								 */

								currentComponent = "tPivotToColumnsDelimited_1";

								/**
								 * [tPivotToColumnsDelimited_1 process_data_begin ] stop
								 */

								/**
								 * [tPivotToColumnsDelimited_1 process_data_end ] start
								 */

								currentComponent = "tPivotToColumnsDelimited_1";

								/**
								 * [tPivotToColumnsDelimited_1 process_data_end ] stop
								 */

							} // End of branch "salida_fact"

						} // close loop of lookup 'lugar' // G_TM_M_043

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_lugar != null) {
					tHash_Lookup_lugar.endGet();
				}
				globalMap.remove("tHash_Lookup_lugar");

				if (tHash_Lookup_captura != null) {
					tHash_Lookup_captura.endGet();
				}
				globalMap.remove("tHash_Lookup_captura");

				if (tHash_Lookup_row1 != null) {
					tHash_Lookup_row1.endGet();
				}
				globalMap.remove("tHash_Lookup_row1");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "tiempo");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tPivotToColumnsDelimited_1 end ] start
				 */

				currentComponent = "tPivotToColumnsDelimited_1";

				nb_line_out_tPivotToColumnsDelimited_1 = group_KeystPivotToColumnsDelimited_1.size();

				//////////////////////////////// Delimited /////////

				outtPivotToColumnsDelimited_1.write("lugar");

				outtPivotToColumnsDelimited_1.write(";");

				outtPivotToColumnsDelimited_1.write("delito");

				outtPivotToColumnsDelimited_1.write(";");

				for (int i = 0; i < pivot_KeystPivotToColumnsDelimited_1.size(); i++) {
					outtPivotToColumnsDelimited_1.write(pivot_KeystPivotToColumnsDelimited_1.get(i));
					if (i == pivot_KeystPivotToColumnsDelimited_1.size() - 1) {
						break;
					}
					outtPivotToColumnsDelimited_1.write(";");
				}

				outtPivotToColumnsDelimited_1.write("\n");

				java.util.Iterator<List<String>> iterator_tPivotToColumnsDelimited_1 = group_KeystPivotToColumnsDelimited_1
						.iterator();

				while (iterator_tPivotToColumnsDelimited_1.hasNext()) {
					List<String> next = iterator_tPivotToColumnsDelimited_1.next();
					for (int j = 0; j < next.size(); j++) {
						outtPivotToColumnsDelimited_1.write(next.get(j));
						outtPivotToColumnsDelimited_1.write(";");
					}

					java.util.List<String> aggOuttPivotToColumnsDelimited_1 = aggregationtPivotToColumnsDelimited_1
							.get(next);

					int gaptPivotToColumnsDelimited_1 = aggOuttPivotToColumnsDelimited_1.size()
							- pivot_KeystPivotToColumnsDelimited_1.size();

					if (gaptPivotToColumnsDelimited_1 < 0) {

						for (int k = 0; k < -gaptPivotToColumnsDelimited_1; k++)
							aggOuttPivotToColumnsDelimited_1.add("");

					}

					for (int j = 0; j < aggOuttPivotToColumnsDelimited_1.size(); j++) {
						outtPivotToColumnsDelimited_1.write(aggOuttPivotToColumnsDelimited_1.get(j));
						if (j == aggOuttPivotToColumnsDelimited_1.size() - 1) {
							break;
						}
						outtPivotToColumnsDelimited_1.write(";");
					}

					outtPivotToColumnsDelimited_1.write("\n");

				}

				if (outtPivotToColumnsDelimited_1 != null) {
					outtPivotToColumnsDelimited_1.flush();
					outtPivotToColumnsDelimited_1.close();
				}

				resourceMap.put("finish_tPivotToColumnsDelimited_1", true);

				globalMap.put("tPivotToColumnsDelimited_1_NB_LINE", nb_line_tPivotToColumnsDelimited_1);
				globalMap.put("tPivotToColumnsDelimited_1_NB_LINE_OUT", nb_line_out_tPivotToColumnsDelimited_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "salida_fact");
				}

				ok_Hash.put("tPivotToColumnsDelimited_1", true);
				end_Hash.put("tPivotToColumnsDelimited_1", System.currentTimeMillis());

				/**
				 * [tPivotToColumnsDelimited_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_captura");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_lugar");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row1");

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tPivotToColumnsDelimited_1 finally ] start
				 */

				currentComponent = "tPivotToColumnsDelimited_1";

				if (resourceMap.get("finish_tPivotToColumnsDelimited_1") == null) {

					if (resourceMap.get("outtPivotToColumnsDelimited_1") != null) {
						((java.io.BufferedWriter) resourceMap.get("outtPivotToColumnsDelimited_1")).flush();
						((java.io.BufferedWriter) resourceMap.get("outtPivotToColumnsDelimited_1")).close();
					}

				}

				/**
				 * [tPivotToColumnsDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class capturaStruct implements routines.system.IPersistableComparableLookupRow<capturaStruct> {
		final static byte[] commonByteArrayLock_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[0];
		static byte[] commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int sk_captura;

		public int getSk_captura() {
			return this.sk_captura;
		}

		public Integer fecha;

		public Integer getFecha() {
			return this.fecha;
		}

		public String delito;

		public String getDelito() {
			return this.delito;
		}

		public String genero;

		public String getGenero() {
			return this.genero;
		}

		public String pais_aprehendido;

		public String getPais_aprehendido() {
			return this.pais_aprehendido;
		}

		public String circunstancia_aprehension;

		public String getCircunstancia_aprehension() {
			return this.circunstancia_aprehension;
		}

		public String municipio;

		public String getMunicipio() {
			return this.municipio;
		}

		public String departamento;

		public String getDepartamento() {
			return this.departamento;
		}

		public java.util.Date fecha_inicio;

		public java.util.Date getFecha_inicio() {
			return this.fecha_inicio;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.fecha == null) ? 0 : this.fecha.hashCode());

				result = prime * result + ((this.municipio == null) ? 0 : this.municipio.hashCode());

				result = prime * result + ((this.departamento == null) ? 0 : this.departamento.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final capturaStruct other = (capturaStruct) obj;

			if (this.fecha == null) {
				if (other.fecha != null)
					return false;

			} else if (!this.fecha.equals(other.fecha))

				return false;

			if (this.municipio == null) {
				if (other.municipio != null)
					return false;

			} else if (!this.municipio.equals(other.municipio))

				return false;

			if (this.departamento == null) {
				if (other.departamento != null)
					return false;

			} else if (!this.departamento.equals(other.departamento))

				return false;

			return true;
		}

		public void copyDataTo(capturaStruct other) {

			other.sk_captura = this.sk_captura;
			other.fecha = this.fecha;
			other.delito = this.delito;
			other.genero = this.genero;
			other.pais_aprehendido = this.pais_aprehendido;
			other.circunstancia_aprehension = this.circunstancia_aprehension;
			other.municipio = this.municipio;
			other.departamento = this.departamento;
			other.fecha_inicio = this.fecha_inicio;

		}

		public void copyKeysDataTo(capturaStruct other) {

			other.fecha = this.fecha;
			other.municipio = this.municipio;
			other.departamento = this.departamento;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito.length) {
					if (length < 1024 && commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito.length == 0) {
						commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[1024];
					} else {
						commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito, 0, length);
				strReturn = new String(commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito) {

				try {

					int length = 0;

					this.fecha = readInteger(dis);

					this.municipio = readString(dis);

					this.departamento = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.fecha, dos);

				// String

				writeString(this.municipio, dos);

				// String

				writeString(this.departamento, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.sk_captura = dis.readInt();

				this.delito = readString(dis, ois);

				this.genero = readString(dis, ois);

				this.pais_aprehendido = readString(dis, ois);

				this.circunstancia_aprehension = readString(dis, ois);

				this.fecha_inicio = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.sk_captura);

				writeString(this.delito, dos, oos);

				writeString(this.genero, dos, oos);

				writeString(this.pais_aprehendido, dos, oos);

				writeString(this.circunstancia_aprehension, dos, oos);

				writeDate(this.fecha_inicio, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sk_captura=" + String.valueOf(sk_captura));
			sb.append(",fecha=" + String.valueOf(fecha));
			sb.append(",delito=" + delito);
			sb.append(",genero=" + genero);
			sb.append(",pais_aprehendido=" + pais_aprehendido);
			sb.append(",circunstancia_aprehension=" + circunstancia_aprehension);
			sb.append(",municipio=" + municipio);
			sb.append(",departamento=" + departamento);
			sb.append(",fecha_inicio=" + String.valueOf(fecha_inicio));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(capturaStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.fecha, other.fecha);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.municipio, other.municipio);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.departamento, other.departamento);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				capturaStruct captura = new capturaStruct();

				/**
				 * [tAdvancedHash_captura begin ] start
				 */

				ok_Hash.put("tAdvancedHash_captura", false);
				start_Hash.put("tAdvancedHash_captura", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_captura";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "captura");
				}

				int tos_count_tAdvancedHash_captura = 0;

				// connection name:captura
				// source node:tDBInput_1 - inputs:(after_tDBInput_4) outputs:(captura,captura)
				// | target node:tAdvancedHash_captura - inputs:(captura) outputs:()
				// linked node: tMap_1 - inputs:(tiempo,captura,lugar,row1)
				// outputs:(salida_fact)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_captura = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<capturaStruct> tHash_Lookup_captura = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<capturaStruct>getLookup(matchingModeEnum_captura);

				globalMap.put("tHash_Lookup_captura", tHash_Lookup_captura);

				/**
				 * [tAdvancedHash_captura begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  \"DWHAprehensiones\".\"public\".\"dimension_captura\".\"sk_captura\", \n  \"DWHAprehensiones\".\"public\".\"di"
						+ "mension_captura\".\"fecha\", \n  \"DWHAprehensiones\".\"public\".\"dimension_captura\".\"delito\", \n  \"DWHAprehensiones"
						+ "\".\"public\".\"dimension_captura\".\"genero\", \n  \"DWHAprehensiones\".\"public\".\"dimension_captura\".\"pais_aprehend"
						+ "ido\", \n  \"DWHAprehensiones\".\"public\".\"dimension_captura\".\"circunstancia_aprehension\", \n  \"DWHAprehensiones\"."
						+ "\"public\".\"dimension_captura\".\"municipio\", \n  \"DWHAprehensiones\".\"public\".\"dimension_captura\".\"departamento"
						+ "\", \n  \"DWHAprehensiones\".\"public\".\"dimension_captura\".\"fecha_inicio\"\nFROM \"DWHAprehensiones\".\"public\".\"dim"
						+ "ension_captura\"";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							captura.sk_captura = 0;
						} else {

							captura.sk_captura = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							captura.fecha = null;
						} else {

							captura.fecha = rs_tDBInput_1.getInt(2);
							if (rs_tDBInput_1.wasNull()) {
								captura.fecha = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							captura.delito = null;
						} else {

							captura.delito = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							captura.genero = null;
						} else {

							captura.genero = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							captura.pais_aprehendido = null;
						} else {

							captura.pais_aprehendido = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							captura.circunstancia_aprehension = null;
						} else {

							captura.circunstancia_aprehension = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6,
									false);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							captura.municipio = null;
						} else {

							captura.municipio = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							captura.departamento = null;
						} else {

							captura.departamento = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							captura.fecha_inicio = null;
						} else {

							captura.fecha_inicio = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 9);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_captura main ] start
						 */

						currentComponent = "tAdvancedHash_captura";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "captura");
						}

						capturaStruct captura_HashRow = new capturaStruct();

						captura_HashRow.sk_captura = captura.sk_captura;

						captura_HashRow.fecha = captura.fecha;

						captura_HashRow.delito = captura.delito;

						captura_HashRow.genero = captura.genero;

						captura_HashRow.pais_aprehendido = captura.pais_aprehendido;

						captura_HashRow.circunstancia_aprehension = captura.circunstancia_aprehension;

						captura_HashRow.municipio = captura.municipio;

						captura_HashRow.departamento = captura.departamento;

						captura_HashRow.fecha_inicio = captura.fecha_inicio;

						tHash_Lookup_captura.put(captura_HashRow);

						tos_count_tAdvancedHash_captura++;

						/**
						 * [tAdvancedHash_captura main ] stop
						 */

						/**
						 * [tAdvancedHash_captura process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_captura";

						/**
						 * [tAdvancedHash_captura process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_captura process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_captura";

						/**
						 * [tAdvancedHash_captura process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_captura end ] start
				 */

				currentComponent = "tAdvancedHash_captura";

				tHash_Lookup_captura.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "captura");
				}

				ok_Hash.put("tAdvancedHash_captura", true);
				end_Hash.put("tAdvancedHash_captura", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_captura end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_captura finally ] start
				 */

				currentComponent = "tAdvancedHash_captura";

				/**
				 * [tAdvancedHash_captura finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class lugarStruct implements routines.system.IPersistableRow<lugarStruct> {
		final static byte[] commonByteArrayLock_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[0];
		static byte[] commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[0];

		public int sk_lugar;

		public int getSk_lugar() {
			return this.sk_lugar;
		}

		public String codigo_municipio;

		public String getCodigo_municipio() {
			return this.codigo_municipio;
		}

		public String municipio;

		public String getMunicipio() {
			return this.municipio;
		}

		public String departamento;

		public String getDepartamento() {
			return this.departamento;
		}

		public String pais;

		public String getPais() {
			return this.pais;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito.length) {
					if (length < 1024 && commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito.length == 0) {
						commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[1024];
					} else {
						commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito, 0, length);
				strReturn = new String(commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito) {

				try {

					int length = 0;

					this.sk_lugar = dis.readInt();

					this.codigo_municipio = readString(dis);

					this.municipio = readString(dis);

					this.departamento = readString(dis);

					this.pais = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.sk_lugar);

				// String

				writeString(this.codigo_municipio, dos);

				// String

				writeString(this.municipio, dos);

				// String

				writeString(this.departamento, dos);

				// String

				writeString(this.pais, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sk_lugar=" + String.valueOf(sk_lugar));
			sb.append(",codigo_municipio=" + codigo_municipio);
			sb.append(",municipio=" + municipio);
			sb.append(",departamento=" + departamento);
			sb.append(",pais=" + pais);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(lugarStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				lugarStruct lugar = new lugarStruct();

				/**
				 * [tAdvancedHash_lugar begin ] start
				 */

				ok_Hash.put("tAdvancedHash_lugar", false);
				start_Hash.put("tAdvancedHash_lugar", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_lugar";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "lugar");
				}

				int tos_count_tAdvancedHash_lugar = 0;

				// connection name:lugar
				// source node:tDBInput_2 - inputs:(after_tDBInput_4) outputs:(lugar,lugar) |
				// target node:tAdvancedHash_lugar - inputs:(lugar) outputs:()
				// linked node: tMap_1 - inputs:(tiempo,captura,lugar,row1)
				// outputs:(salida_fact)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_lugar = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<lugarStruct> tHash_Lookup_lugar = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<lugarStruct>getLookup(matchingModeEnum_lugar);

				globalMap.put("tHash_Lookup_lugar", tHash_Lookup_lugar);

				/**
				 * [tAdvancedHash_lugar begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  \"DWHAprehensiones\".\"public\".\"dimension_lugar\".\"sk_lugar\", \n  \"DWHAprehensiones\".\"public\".\"dimens"
						+ "ion_lugar\".\"codigo_municipio\", \n  \"DWHAprehensiones\".\"public\".\"dimension_lugar\".\"municipio\", \n  \"DWHAprehens"
						+ "iones\".\"public\".\"dimension_lugar\".\"departamento\", \n  \"DWHAprehensiones\".\"public\".\"dimension_lugar\".\"pais\""
						+ "\nFROM \"DWHAprehensiones\".\"public\".\"dimension_lugar\"";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							lugar.sk_lugar = 0;
						} else {

							lugar.sk_lugar = rs_tDBInput_2.getInt(1);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							lugar.codigo_municipio = null;
						} else {

							lugar.codigo_municipio = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							lugar.municipio = null;
						} else {

							lugar.municipio = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							lugar.departamento = null;
						} else {

							lugar.departamento = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							lugar.pais = null;
						} else {

							lugar.pais = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_lugar main ] start
						 */

						currentComponent = "tAdvancedHash_lugar";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "lugar");
						}

						lugarStruct lugar_HashRow = new lugarStruct();

						lugar_HashRow.sk_lugar = lugar.sk_lugar;

						lugar_HashRow.codigo_municipio = lugar.codigo_municipio;

						lugar_HashRow.municipio = lugar.municipio;

						lugar_HashRow.departamento = lugar.departamento;

						lugar_HashRow.pais = lugar.pais;

						tHash_Lookup_lugar.put(lugar_HashRow);

						tos_count_tAdvancedHash_lugar++;

						/**
						 * [tAdvancedHash_lugar main ] stop
						 */

						/**
						 * [tAdvancedHash_lugar process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_lugar";

						/**
						 * [tAdvancedHash_lugar process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_lugar process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_lugar";

						/**
						 * [tAdvancedHash_lugar process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_lugar end ] start
				 */

				currentComponent = "tAdvancedHash_lugar";

				tHash_Lookup_lugar.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "lugar");
				}

				ok_Hash.put("tAdvancedHash_lugar", true);
				end_Hash.put("tAdvancedHash_lugar", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_lugar end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_lugar finally ] start
				 */

				currentComponent = "tAdvancedHash_lugar";

				/**
				 * [tAdvancedHash_lugar finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableComparableLookupRow<row1Struct> {
		final static byte[] commonByteArrayLock_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[0];
		static byte[] commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int codigo_delito;

		public int getCodigo_delito() {
			return this.codigo_delito;
		}

		public String delito;

		public String getDelito() {
			return this.delito;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.delito == null) ? 0 : this.delito.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.delito == null) {
				if (other.delito != null)
					return false;

			} else if (!this.delito.equals(other.delito))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.codigo_delito = this.codigo_delito;
			other.delito = this.delito;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.delito = this.delito;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito.length) {
					if (length < 1024 && commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito.length == 0) {
						commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[1024];
					} else {
						commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito, 0, length);
				strReturn = new String(commonByteArray_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECT_APREHENDIDOSDWH_Job_Cargar_fact_delito) {

				try {

					int length = 0;

					this.delito = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.delito, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.codigo_delito = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.codigo_delito);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("codigo_delito=" + String.valueOf(codigo_delito));
			sb.append(",delito=" + delito);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.delito, other.delito);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tAdvancedHash_row1 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row1", false);
				start_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tAdvancedHash_row1 = 0;

				// connection name:row1
				// source node:tDBInput_3 - inputs:(after_tDBInput_4) outputs:(row1,row1) |
				// target node:tAdvancedHash_row1 - inputs:(row1) outputs:()
				// linked node: tMap_1 - inputs:(tiempo,captura,lugar,row1)
				// outputs:(salida_fact)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row1 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row1Struct>getLookup(matchingModeEnum_row1);

				globalMap.put("tHash_Lookup_row1", tHash_Lookup_row1);

				/**
				 * [tAdvancedHash_row1 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "anaPg";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:XZy7xfQqhju9In6nElPHCdR3W/il2wy5H+6HamaUf6o=");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String url_tDBInput_3 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "DWHAprehensiones";

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);

				conn_tDBInput_3.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n  \"DWHAprehensiones\".\"public\".\"delitos\".\"codigo_delito\", \n  \"DWHAprehensiones\".\"public\".\"delitos\""
						+ ".\"delito\"\nFROM \"DWHAprehensiones\".\"public\".\"delitos\"";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row1.codigo_delito = 0;
						} else {

							row1.codigo_delito = rs_tDBInput_3.getInt(1);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row1.delito = null;
						} else {

							row1.delito = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row1 main ] start
						 */

						currentComponent = "tAdvancedHash_row1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						row1Struct row1_HashRow = new row1Struct();

						row1_HashRow.codigo_delito = row1.codigo_delito;

						row1_HashRow.delito = row1.delito;

						tHash_Lookup_row1.put(row1_HashRow);

						tos_count_tAdvancedHash_row1++;

						/**
						 * [tAdvancedHash_row1 main ] stop
						 */

						/**
						 * [tAdvancedHash_row1 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row1";

						/**
						 * [tAdvancedHash_row1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row1 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row1";

						/**
						 * [tAdvancedHash_row1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.commit();

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row1 end ] start
				 */

				currentComponent = "tAdvancedHash_row1";

				tHash_Lookup_row1.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tAdvancedHash_row1", true);
				end_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row1 finally ] start
				 */

				currentComponent = "tAdvancedHash_row1";

				/**
				 * [tAdvancedHash_row1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Job_Cargar_fact_delito Job_Cargar_fact_delitoClass = new Job_Cargar_fact_delito();

		int exitCode = Job_Cargar_fact_delitoClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Job_Cargar_fact_delito.class.getClassLoader().getResourceAsStream(
					"project_aprehendidosdwh/job_cargar_fact_delito_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Job_Cargar_fact_delito.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : Job_Cargar_fact_delito");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 147977 characters generated by Talend Open Studio for Big Data on the 19 de
 * noviembre de 2021, 5:22:53 p. m. COT
 ************************************************************************************************/